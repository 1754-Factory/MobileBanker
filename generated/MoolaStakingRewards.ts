/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type ExternalRewardPaid = ContractEventLog<{
  user: string;
  reward: string;
  0: string;
  1: string;
}>;
export type OwnerChanged = ContractEventLog<{
  oldOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type OwnerNominated = ContractEventLog<{
  newOwner: string;
  0: string;
}>;
export type PeriodFinishUpdated = ContractEventLog<{
  originalFinish: string;
  newFinish: string;
  0: string;
  1: string;
}>;
export type Recovered = ContractEventLog<{
  token: string;
  amount: string;
  0: string;
  1: string;
}>;
export type RewardAdded = ContractEventLog<{
  reward: string;
  0: string;
}>;
export type RewardPaid = ContractEventLog<{
  user: string;
  reward: string;
  0: string;
  1: string;
}>;
export type RewardsDurationUpdated = ContractEventLog<{
  newDuration: string;
  0: string;
}>;
export type Staked = ContractEventLog<{
  user: string;
  amount: string;
  0: string;
  1: string;
}>;
export type Withdrawn = ContractEventLog<{
  user: string;
  amount: string;
  0: string;
  1: string;
}>;

export interface MoolaStakingRewards extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): MoolaStakingRewards;
  clone(): MoolaStakingRewards;
  methods: {
    acceptOwnership(): NonPayableTransactionObject<void>;

    externalRewards(
      arg0: string,
      arg1: string
    ): NonPayableTransactionObject<string>;

    externalRewardsTokens(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    externalStakingRewards(): NonPayableTransactionObject<string>;

    lastUpdateTime(): NonPayableTransactionObject<string>;

    nominateNewOwner(_owner: string): NonPayableTransactionObject<void>;

    nominatedOwner(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    periodFinish(): NonPayableTransactionObject<string>;

    rewardPerTokenStored(): NonPayableTransactionObject<string>;

    rewardRate(): NonPayableTransactionObject<string>;

    rewards(arg0: string): NonPayableTransactionObject<string>;

    rewardsDistribution(): NonPayableTransactionObject<string>;

    rewardsDuration(): NonPayableTransactionObject<string>;

    rewardsToken(): NonPayableTransactionObject<string>;

    setRewardsDistribution(
      _rewardsDistribution: string
    ): NonPayableTransactionObject<void>;

    stakingToken(): NonPayableTransactionObject<string>;

    userRewardPerTokenPaid(arg0: string): NonPayableTransactionObject<string>;

    totalSupply(): NonPayableTransactionObject<string>;

    balanceOf(account: string): NonPayableTransactionObject<string>;

    lastTimeRewardApplicable(): NonPayableTransactionObject<string>;

    rewardPerToken(): NonPayableTransactionObject<string>;

    earned(account: string): NonPayableTransactionObject<string>;

    earnedExternal(account: string): NonPayableTransactionObject<string[]>;

    getRewardForDuration(): NonPayableTransactionObject<string>;

    stake(amount: number | string | BN): NonPayableTransactionObject<void>;

    withdraw(amount: number | string | BN): NonPayableTransactionObject<void>;

    getReward(): NonPayableTransactionObject<void>;

    exit(): NonPayableTransactionObject<void>;

    notifyRewardAmount(
      reward: number | string | BN
    ): NonPayableTransactionObject<void>;

    updatePeriodFinish(
      timestamp: number | string | BN
    ): NonPayableTransactionObject<void>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: number | string | BN
    ): NonPayableTransactionObject<void>;

    setRewardsDuration(
      _rewardsDuration: number | string | BN
    ): NonPayableTransactionObject<void>;
  };
  events: {
    ExternalRewardPaid(cb?: Callback<ExternalRewardPaid>): EventEmitter;
    ExternalRewardPaid(
      options?: EventOptions,
      cb?: Callback<ExternalRewardPaid>
    ): EventEmitter;

    OwnerChanged(cb?: Callback<OwnerChanged>): EventEmitter;
    OwnerChanged(
      options?: EventOptions,
      cb?: Callback<OwnerChanged>
    ): EventEmitter;

    OwnerNominated(cb?: Callback<OwnerNominated>): EventEmitter;
    OwnerNominated(
      options?: EventOptions,
      cb?: Callback<OwnerNominated>
    ): EventEmitter;

    PeriodFinishUpdated(cb?: Callback<PeriodFinishUpdated>): EventEmitter;
    PeriodFinishUpdated(
      options?: EventOptions,
      cb?: Callback<PeriodFinishUpdated>
    ): EventEmitter;

    Recovered(cb?: Callback<Recovered>): EventEmitter;
    Recovered(options?: EventOptions, cb?: Callback<Recovered>): EventEmitter;

    RewardAdded(cb?: Callback<RewardAdded>): EventEmitter;
    RewardAdded(
      options?: EventOptions,
      cb?: Callback<RewardAdded>
    ): EventEmitter;

    RewardPaid(cb?: Callback<RewardPaid>): EventEmitter;
    RewardPaid(options?: EventOptions, cb?: Callback<RewardPaid>): EventEmitter;

    RewardsDurationUpdated(cb?: Callback<RewardsDurationUpdated>): EventEmitter;
    RewardsDurationUpdated(
      options?: EventOptions,
      cb?: Callback<RewardsDurationUpdated>
    ): EventEmitter;

    Staked(cb?: Callback<Staked>): EventEmitter;
    Staked(options?: EventOptions, cb?: Callback<Staked>): EventEmitter;

    Withdrawn(cb?: Callback<Withdrawn>): EventEmitter;
    Withdrawn(options?: EventOptions, cb?: Callback<Withdrawn>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "ExternalRewardPaid", cb: Callback<ExternalRewardPaid>): void;
  once(
    event: "ExternalRewardPaid",
    options: EventOptions,
    cb: Callback<ExternalRewardPaid>
  ): void;

  once(event: "OwnerChanged", cb: Callback<OwnerChanged>): void;
  once(
    event: "OwnerChanged",
    options: EventOptions,
    cb: Callback<OwnerChanged>
  ): void;

  once(event: "OwnerNominated", cb: Callback<OwnerNominated>): void;
  once(
    event: "OwnerNominated",
    options: EventOptions,
    cb: Callback<OwnerNominated>
  ): void;

  once(event: "PeriodFinishUpdated", cb: Callback<PeriodFinishUpdated>): void;
  once(
    event: "PeriodFinishUpdated",
    options: EventOptions,
    cb: Callback<PeriodFinishUpdated>
  ): void;

  once(event: "Recovered", cb: Callback<Recovered>): void;
  once(
    event: "Recovered",
    options: EventOptions,
    cb: Callback<Recovered>
  ): void;

  once(event: "RewardAdded", cb: Callback<RewardAdded>): void;
  once(
    event: "RewardAdded",
    options: EventOptions,
    cb: Callback<RewardAdded>
  ): void;

  once(event: "RewardPaid", cb: Callback<RewardPaid>): void;
  once(
    event: "RewardPaid",
    options: EventOptions,
    cb: Callback<RewardPaid>
  ): void;

  once(
    event: "RewardsDurationUpdated",
    cb: Callback<RewardsDurationUpdated>
  ): void;
  once(
    event: "RewardsDurationUpdated",
    options: EventOptions,
    cb: Callback<RewardsDurationUpdated>
  ): void;

  once(event: "Staked", cb: Callback<Staked>): void;
  once(event: "Staked", options: EventOptions, cb: Callback<Staked>): void;

  once(event: "Withdrawn", cb: Callback<Withdrawn>): void;
  once(
    event: "Withdrawn",
    options: EventOptions,
    cb: Callback<Withdrawn>
  ): void;
}
