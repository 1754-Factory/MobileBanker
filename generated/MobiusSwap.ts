/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AddLiquidity = ContractEventLog<{
  provider: string;
  tokenAmounts: string[];
  fees: string[];
  invariant: string;
  lpTokenSupply: string;
  0: string;
  1: string[];
  2: string[];
  3: string;
  4: string;
}>;
export type NewAdminFee = ContractEventLog<{
  newAdminFee: string;
  0: string;
}>;
export type NewDepositFee = ContractEventLog<{
  newDepositFee: string;
  0: string;
}>;
export type NewSwapFee = ContractEventLog<{
  newSwapFee: string;
  0: string;
}>;
export type NewWithdrawFee = ContractEventLog<{
  newWithdrawFee: string;
  0: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type Paused = ContractEventLog<{
  account: string;
  0: string;
}>;
export type RampA = ContractEventLog<{
  oldA: string;
  newA: string;
  initialTime: string;
  futureTime: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type RemoveLiquidity = ContractEventLog<{
  provider: string;
  tokenAmounts: string[];
  lpTokenSupply: string;
  0: string;
  1: string[];
  2: string;
}>;
export type RemoveLiquidityImbalance = ContractEventLog<{
  provider: string;
  tokenAmounts: string[];
  fees: string[];
  invariant: string;
  lpTokenSupply: string;
  0: string;
  1: string[];
  2: string[];
  3: string;
  4: string;
}>;
export type RemoveLiquidityOne = ContractEventLog<{
  provider: string;
  lpTokenAmount: string;
  lpTokenSupply: string;
  boughtId: string;
  tokensBought: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type StopRampA = ContractEventLog<{
  currentA: string;
  time: string;
  0: string;
  1: string;
}>;
export type TokenSwap = ContractEventLog<{
  buyer: string;
  tokensSold: string;
  tokensBought: string;
  soldId: string;
  boughtId: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type Unpaused = ContractEventLog<{
  account: string;
  0: string;
}>;

export interface MobiusSwap extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): MobiusSwap;
  clone(): MobiusSwap;
  methods: {
    addLiquidity(
      amounts: (number | string | BN)[],
      minToMint: number | string | BN,
      deadline: number | string | BN
    ): NonPayableTransactionObject<string>;

    calculateCurrentWithdrawFee(
      user: string
    ): NonPayableTransactionObject<string>;

    calculateRemoveLiquidity(
      account: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<string[]>;

    calculateRemoveLiquidityOneToken(
      account: string,
      tokenAmount: number | string | BN,
      tokenIndex: number | string | BN
    ): NonPayableTransactionObject<string>;

    calculateSwap(
      tokenIndexFrom: number | string | BN,
      tokenIndexTo: number | string | BN,
      dx: number | string | BN
    ): NonPayableTransactionObject<string>;

    calculateTokenAmount(
      account: string,
      amounts: (number | string | BN)[],
      deposit: boolean
    ): NonPayableTransactionObject<string>;

    getA(): NonPayableTransactionObject<string>;

    getAPrecise(): NonPayableTransactionObject<string>;

    getAdminBalance(
      index: number | string | BN
    ): NonPayableTransactionObject<string>;

    getBalances(): NonPayableTransactionObject<string[]>;

    getDepositTimestamp(user: string): NonPayableTransactionObject<string>;

    getLpToken(): NonPayableTransactionObject<string>;

    getSwapFee(): NonPayableTransactionObject<string>;

    getToken(index: number | string | BN): NonPayableTransactionObject<string>;

    getTokenBalance(
      index: number | string | BN
    ): NonPayableTransactionObject<string>;

    getTokenIndex(tokenAddress: string): NonPayableTransactionObject<string>;

    getVirtualPrice(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    pause(): NonPayableTransactionObject<void>;

    paused(): NonPayableTransactionObject<boolean>;

    rampA(
      futureA: number | string | BN,
      futureTime: number | string | BN
    ): NonPayableTransactionObject<void>;

    removeLiquidity(
      amount: number | string | BN,
      minAmounts: (number | string | BN)[],
      deadline: number | string | BN
    ): NonPayableTransactionObject<string[]>;

    removeLiquidityImbalance(
      amounts: (number | string | BN)[],
      maxBurnAmount: number | string | BN,
      deadline: number | string | BN
    ): NonPayableTransactionObject<string>;

    removeLiquidityOneToken(
      tokenAmount: number | string | BN,
      tokenIndex: number | string | BN,
      minAmount: number | string | BN,
      deadline: number | string | BN
    ): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    setAdminFee(
      newAdminFee: number | string | BN
    ): NonPayableTransactionObject<void>;

    setDefaultDepositFee(
      newDepositFee: number | string | BN
    ): NonPayableTransactionObject<void>;

    setDefaultWithdrawFee(
      newWithdrawFee: number | string | BN
    ): NonPayableTransactionObject<void>;

    setDevAddress(_devaddr: string): NonPayableTransactionObject<void>;

    setSwapFee(
      newSwapFee: number | string | BN
    ): NonPayableTransactionObject<void>;

    stopRampA(): NonPayableTransactionObject<void>;

    swap(
      tokenIndexFrom: number | string | BN,
      tokenIndexTo: number | string | BN,
      dx: number | string | BN,
      minDy: number | string | BN,
      deadline: number | string | BN
    ): NonPayableTransactionObject<string>;

    swapStorage(): NonPayableTransactionObject<{
      initialA: string;
      futureA: string;
      initialATime: string;
      futureATime: string;
      swapFee: string;
      adminFee: string;
      defaultDepositFee: string;
      defaultWithdrawFee: string;
      devaddr: string;
      lpToken: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: string;
      8: string;
      9: string;
    }>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    unpause(): NonPayableTransactionObject<void>;

    updateUserWithdrawFee(
      recipient: string,
      transferAmount: number | string | BN
    ): NonPayableTransactionObject<void>;

    withdrawAdminFees(): NonPayableTransactionObject<void>;
  };
  events: {
    AddLiquidity(cb?: Callback<AddLiquidity>): EventEmitter;
    AddLiquidity(
      options?: EventOptions,
      cb?: Callback<AddLiquidity>
    ): EventEmitter;

    NewAdminFee(cb?: Callback<NewAdminFee>): EventEmitter;
    NewAdminFee(
      options?: EventOptions,
      cb?: Callback<NewAdminFee>
    ): EventEmitter;

    NewDepositFee(cb?: Callback<NewDepositFee>): EventEmitter;
    NewDepositFee(
      options?: EventOptions,
      cb?: Callback<NewDepositFee>
    ): EventEmitter;

    NewSwapFee(cb?: Callback<NewSwapFee>): EventEmitter;
    NewSwapFee(options?: EventOptions, cb?: Callback<NewSwapFee>): EventEmitter;

    NewWithdrawFee(cb?: Callback<NewWithdrawFee>): EventEmitter;
    NewWithdrawFee(
      options?: EventOptions,
      cb?: Callback<NewWithdrawFee>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    Paused(cb?: Callback<Paused>): EventEmitter;
    Paused(options?: EventOptions, cb?: Callback<Paused>): EventEmitter;

    RampA(cb?: Callback<RampA>): EventEmitter;
    RampA(options?: EventOptions, cb?: Callback<RampA>): EventEmitter;

    RemoveLiquidity(cb?: Callback<RemoveLiquidity>): EventEmitter;
    RemoveLiquidity(
      options?: EventOptions,
      cb?: Callback<RemoveLiquidity>
    ): EventEmitter;

    RemoveLiquidityImbalance(
      cb?: Callback<RemoveLiquidityImbalance>
    ): EventEmitter;
    RemoveLiquidityImbalance(
      options?: EventOptions,
      cb?: Callback<RemoveLiquidityImbalance>
    ): EventEmitter;

    RemoveLiquidityOne(cb?: Callback<RemoveLiquidityOne>): EventEmitter;
    RemoveLiquidityOne(
      options?: EventOptions,
      cb?: Callback<RemoveLiquidityOne>
    ): EventEmitter;

    StopRampA(cb?: Callback<StopRampA>): EventEmitter;
    StopRampA(options?: EventOptions, cb?: Callback<StopRampA>): EventEmitter;

    TokenSwap(cb?: Callback<TokenSwap>): EventEmitter;
    TokenSwap(options?: EventOptions, cb?: Callback<TokenSwap>): EventEmitter;

    Unpaused(cb?: Callback<Unpaused>): EventEmitter;
    Unpaused(options?: EventOptions, cb?: Callback<Unpaused>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AddLiquidity", cb: Callback<AddLiquidity>): void;
  once(
    event: "AddLiquidity",
    options: EventOptions,
    cb: Callback<AddLiquidity>
  ): void;

  once(event: "NewAdminFee", cb: Callback<NewAdminFee>): void;
  once(
    event: "NewAdminFee",
    options: EventOptions,
    cb: Callback<NewAdminFee>
  ): void;

  once(event: "NewDepositFee", cb: Callback<NewDepositFee>): void;
  once(
    event: "NewDepositFee",
    options: EventOptions,
    cb: Callback<NewDepositFee>
  ): void;

  once(event: "NewSwapFee", cb: Callback<NewSwapFee>): void;
  once(
    event: "NewSwapFee",
    options: EventOptions,
    cb: Callback<NewSwapFee>
  ): void;

  once(event: "NewWithdrawFee", cb: Callback<NewWithdrawFee>): void;
  once(
    event: "NewWithdrawFee",
    options: EventOptions,
    cb: Callback<NewWithdrawFee>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "Paused", cb: Callback<Paused>): void;
  once(event: "Paused", options: EventOptions, cb: Callback<Paused>): void;

  once(event: "RampA", cb: Callback<RampA>): void;
  once(event: "RampA", options: EventOptions, cb: Callback<RampA>): void;

  once(event: "RemoveLiquidity", cb: Callback<RemoveLiquidity>): void;
  once(
    event: "RemoveLiquidity",
    options: EventOptions,
    cb: Callback<RemoveLiquidity>
  ): void;

  once(
    event: "RemoveLiquidityImbalance",
    cb: Callback<RemoveLiquidityImbalance>
  ): void;
  once(
    event: "RemoveLiquidityImbalance",
    options: EventOptions,
    cb: Callback<RemoveLiquidityImbalance>
  ): void;

  once(event: "RemoveLiquidityOne", cb: Callback<RemoveLiquidityOne>): void;
  once(
    event: "RemoveLiquidityOne",
    options: EventOptions,
    cb: Callback<RemoveLiquidityOne>
  ): void;

  once(event: "StopRampA", cb: Callback<StopRampA>): void;
  once(
    event: "StopRampA",
    options: EventOptions,
    cb: Callback<StopRampA>
  ): void;

  once(event: "TokenSwap", cb: Callback<TokenSwap>): void;
  once(
    event: "TokenSwap",
    options: EventOptions,
    cb: Callback<TokenSwap>
  ): void;

  once(event: "Unpaused", cb: Callback<Unpaused>): void;
  once(event: "Unpaused", options: EventOptions, cb: Callback<Unpaused>): void;
}
