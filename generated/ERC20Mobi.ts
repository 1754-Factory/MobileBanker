/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Transfer = ContractEventLog<{
  _from: string;
  _to: string;
  _value: string;
  0: string;
  1: string;
  2: string;
}>;
export type Approval = ContractEventLog<{
  _owner: string;
  _spender: string;
  _value: string;
  0: string;
  1: string;
  2: string;
}>;
export type UpdateMiningParameters = ContractEventLog<{
  time: string;
  rate: string;
  supply: string;
  0: string;
  1: string;
  2: string;
}>;
export type SetMinter = ContractEventLog<{
  minter: string;
  0: string;
}>;
export type SetAdmin = ContractEventLog<{
  admin: string;
  0: string;
}>;

export interface ERC20Mobi extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): ERC20Mobi;
  clone(): ERC20Mobi;
  methods: {
    update_mining_parameters(): NonPayableTransactionObject<void>;

    start_epoch_time_write(): NonPayableTransactionObject<string>;

    future_epoch_time_write(): NonPayableTransactionObject<string>;

    available_supply(): NonPayableTransactionObject<string>;

    mintable_in_timeframe(
      start: number | string | BN,
      end: number | string | BN
    ): NonPayableTransactionObject<string>;

    set_minter(_minter: string): NonPayableTransactionObject<void>;

    set_admin(_admin: string): NonPayableTransactionObject<void>;

    totalSupply(): NonPayableTransactionObject<string>;

    allowance(
      _owner: string,
      _spender: string
    ): NonPayableTransactionObject<string>;

    transfer(
      _to: string,
      _value: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    transferFrom(
      _from: string,
      _to: string,
      _value: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    approve(
      _spender: string,
      _value: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    mint(
      _to: string,
      _value: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    burn(_value: number | string | BN): NonPayableTransactionObject<boolean>;

    set_name(_name: string, _symbol: string): NonPayableTransactionObject<void>;

    name(): NonPayableTransactionObject<string>;

    symbol(): NonPayableTransactionObject<string>;

    decimals(): NonPayableTransactionObject<string>;

    balanceOf(arg0: string): NonPayableTransactionObject<string>;

    minter(): NonPayableTransactionObject<string>;

    admin(): NonPayableTransactionObject<string>;

    mining_epoch(): NonPayableTransactionObject<string>;

    start_epoch_time(): NonPayableTransactionObject<string>;

    rate(): NonPayableTransactionObject<string>;
  };
  events: {
    Transfer(cb?: Callback<Transfer>): EventEmitter;
    Transfer(options?: EventOptions, cb?: Callback<Transfer>): EventEmitter;

    Approval(cb?: Callback<Approval>): EventEmitter;
    Approval(options?: EventOptions, cb?: Callback<Approval>): EventEmitter;

    UpdateMiningParameters(cb?: Callback<UpdateMiningParameters>): EventEmitter;
    UpdateMiningParameters(
      options?: EventOptions,
      cb?: Callback<UpdateMiningParameters>
    ): EventEmitter;

    SetMinter(cb?: Callback<SetMinter>): EventEmitter;
    SetMinter(options?: EventOptions, cb?: Callback<SetMinter>): EventEmitter;

    SetAdmin(cb?: Callback<SetAdmin>): EventEmitter;
    SetAdmin(options?: EventOptions, cb?: Callback<SetAdmin>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Transfer", cb: Callback<Transfer>): void;
  once(event: "Transfer", options: EventOptions, cb: Callback<Transfer>): void;

  once(event: "Approval", cb: Callback<Approval>): void;
  once(event: "Approval", options: EventOptions, cb: Callback<Approval>): void;

  once(
    event: "UpdateMiningParameters",
    cb: Callback<UpdateMiningParameters>
  ): void;
  once(
    event: "UpdateMiningParameters",
    options: EventOptions,
    cb: Callback<UpdateMiningParameters>
  ): void;

  once(event: "SetMinter", cb: Callback<SetMinter>): void;
  once(
    event: "SetMinter",
    options: EventOptions,
    cb: Callback<SetMinter>
  ): void;

  once(event: "SetAdmin", cb: Callback<SetAdmin>): void;
  once(event: "SetAdmin", options: EventOptions, cb: Callback<SetAdmin>): void;
}
