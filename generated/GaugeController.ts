/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type CommitOwnership = ContractEventLog<{
  admin: string;
  0: string;
}>;
export type ApplyOwnership = ContractEventLog<{
  admin: string;
  0: string;
}>;
export type AddType = ContractEventLog<{
  name: string;
  type_id: string;
  0: string;
  1: string;
}>;
export type NewTypeWeight = ContractEventLog<{
  type_id: string;
  time: string;
  weight: string;
  total_weight: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type NewGaugeWeight = ContractEventLog<{
  gauge_address: string;
  time: string;
  weight: string;
  total_weight: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type VoteForGauge = ContractEventLog<{
  time: string;
  user: string;
  gauge_addr: string;
  weight: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type NewGauge = ContractEventLog<{
  addr: string;
  gauge_type: string;
  weight: string;
  0: string;
  1: string;
  2: string;
}>;

export interface GaugeController extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): GaugeController;
  clone(): GaugeController;
  methods: {
    commit_transfer_ownership(addr: string): NonPayableTransactionObject<void>;

    apply_transfer_ownership(): NonPayableTransactionObject<void>;

    gauge_types(_addr: string): NonPayableTransactionObject<string>;

    "add_gauge(address,int128)"(
      addr: string,
      gauge_type: number | string | BN
    ): NonPayableTransactionObject<void>;

    "add_gauge(address,int128,uint256)"(
      addr: string,
      gauge_type: number | string | BN,
      weight: number | string | BN
    ): NonPayableTransactionObject<void>;

    checkpoint(): NonPayableTransactionObject<void>;

    checkpoint_gauge(addr: string): NonPayableTransactionObject<void>;

    "gauge_relative_weight(address)"(
      addr: string
    ): NonPayableTransactionObject<string>;

    "gauge_relative_weight(address,uint256)"(
      addr: string,
      time: number | string | BN
    ): NonPayableTransactionObject<string>;

    "gauge_relative_weight_write(address)"(
      addr: string
    ): NonPayableTransactionObject<string>;

    "gauge_relative_weight_write(address,uint256)"(
      addr: string,
      time: number | string | BN
    ): NonPayableTransactionObject<string>;

    "add_type(string)"(_name: string): NonPayableTransactionObject<void>;

    "add_type(string,uint256)"(
      _name: string,
      weight: number | string | BN
    ): NonPayableTransactionObject<void>;

    change_type_weight(
      type_id: number | string | BN,
      weight: number | string | BN
    ): NonPayableTransactionObject<void>;

    change_gauge_weight(
      addr: string,
      weight: number | string | BN
    ): NonPayableTransactionObject<void>;

    vote_for_gauge_weights(
      _gauge_addr: string,
      _user_weight: number | string | BN
    ): NonPayableTransactionObject<void>;

    get_gauge_weight(addr: string): NonPayableTransactionObject<string>;

    get_type_weight(
      type_id: number | string | BN
    ): NonPayableTransactionObject<string>;

    get_total_weight(): NonPayableTransactionObject<string>;

    get_weights_sum_per_type(
      type_id: number | string | BN
    ): NonPayableTransactionObject<string>;

    admin(): NonPayableTransactionObject<string>;

    future_admin(): NonPayableTransactionObject<string>;

    token(): NonPayableTransactionObject<string>;

    voting_escrow(): NonPayableTransactionObject<string>;

    n_gauge_types(): NonPayableTransactionObject<string>;

    n_gauges(): NonPayableTransactionObject<string>;

    gauge_type_names(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    gauges(arg0: number | string | BN): NonPayableTransactionObject<string>;

    vote_user_slopes(
      arg0: string,
      arg1: string
    ): NonPayableTransactionObject<{
      slope: string;
      power: string;
      end: string;
      0: string;
      1: string;
      2: string;
    }>;

    vote_user_power(arg0: string): NonPayableTransactionObject<string>;

    last_user_vote(
      arg0: string,
      arg1: string
    ): NonPayableTransactionObject<string>;

    points_weight(
      arg0: string,
      arg1: number | string | BN
    ): NonPayableTransactionObject<{
      bias: string;
      slope: string;
      0: string;
      1: string;
    }>;

    time_weight(arg0: string): NonPayableTransactionObject<string>;

    points_sum(
      arg0: number | string | BN,
      arg1: number | string | BN
    ): NonPayableTransactionObject<{
      bias: string;
      slope: string;
      0: string;
      1: string;
    }>;

    time_sum(arg0: number | string | BN): NonPayableTransactionObject<string>;

    points_total(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    time_total(): NonPayableTransactionObject<string>;

    points_type_weight(
      arg0: number | string | BN,
      arg1: number | string | BN
    ): NonPayableTransactionObject<string>;

    time_type_weight(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;
  };
  events: {
    CommitOwnership(cb?: Callback<CommitOwnership>): EventEmitter;
    CommitOwnership(
      options?: EventOptions,
      cb?: Callback<CommitOwnership>
    ): EventEmitter;

    ApplyOwnership(cb?: Callback<ApplyOwnership>): EventEmitter;
    ApplyOwnership(
      options?: EventOptions,
      cb?: Callback<ApplyOwnership>
    ): EventEmitter;

    AddType(cb?: Callback<AddType>): EventEmitter;
    AddType(options?: EventOptions, cb?: Callback<AddType>): EventEmitter;

    NewTypeWeight(cb?: Callback<NewTypeWeight>): EventEmitter;
    NewTypeWeight(
      options?: EventOptions,
      cb?: Callback<NewTypeWeight>
    ): EventEmitter;

    NewGaugeWeight(cb?: Callback<NewGaugeWeight>): EventEmitter;
    NewGaugeWeight(
      options?: EventOptions,
      cb?: Callback<NewGaugeWeight>
    ): EventEmitter;

    VoteForGauge(cb?: Callback<VoteForGauge>): EventEmitter;
    VoteForGauge(
      options?: EventOptions,
      cb?: Callback<VoteForGauge>
    ): EventEmitter;

    NewGauge(cb?: Callback<NewGauge>): EventEmitter;
    NewGauge(options?: EventOptions, cb?: Callback<NewGauge>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "CommitOwnership", cb: Callback<CommitOwnership>): void;
  once(
    event: "CommitOwnership",
    options: EventOptions,
    cb: Callback<CommitOwnership>
  ): void;

  once(event: "ApplyOwnership", cb: Callback<ApplyOwnership>): void;
  once(
    event: "ApplyOwnership",
    options: EventOptions,
    cb: Callback<ApplyOwnership>
  ): void;

  once(event: "AddType", cb: Callback<AddType>): void;
  once(event: "AddType", options: EventOptions, cb: Callback<AddType>): void;

  once(event: "NewTypeWeight", cb: Callback<NewTypeWeight>): void;
  once(
    event: "NewTypeWeight",
    options: EventOptions,
    cb: Callback<NewTypeWeight>
  ): void;

  once(event: "NewGaugeWeight", cb: Callback<NewGaugeWeight>): void;
  once(
    event: "NewGaugeWeight",
    options: EventOptions,
    cb: Callback<NewGaugeWeight>
  ): void;

  once(event: "VoteForGauge", cb: Callback<VoteForGauge>): void;
  once(
    event: "VoteForGauge",
    options: EventOptions,
    cb: Callback<VoteForGauge>
  ): void;

  once(event: "NewGauge", cb: Callback<NewGauge>): void;
  once(event: "NewGauge", options: EventOptions, cb: Callback<NewGauge>): void;
}
