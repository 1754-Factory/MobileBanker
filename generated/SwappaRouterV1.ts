/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Swap = ContractEventLog<{
  sender: string;
  to: string;
  input: string;
  output: string;
  inputAmount: string;
  outputAmount: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;

export interface SwappaRouterV1 extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): SwappaRouterV1;
  clone(): SwappaRouterV1;
  methods: {
    getOutputAmount(
      path: string[],
      pairs: string[],
      extras: (string | number[])[],
      inputAmount: number | string | BN
    ): NonPayableTransactionObject<string>;

    swapExactInputForOutput(
      path: string[],
      pairs: string[],
      extras: (string | number[])[],
      inputAmount: number | string | BN,
      minOutputAmount: number | string | BN,
      to: string,
      deadline: number | string | BN
    ): NonPayableTransactionObject<string>;

    swapExactInputForOutputWithPrecheck(
      path: string[],
      pairs: string[],
      extras: (string | number[])[],
      inputAmount: number | string | BN,
      minOutputAmount: number | string | BN,
      to: string,
      deadline: number | string | BN
    ): NonPayableTransactionObject<string>;
  };
  events: {
    Swap(cb?: Callback<Swap>): EventEmitter;
    Swap(options?: EventOptions, cb?: Callback<Swap>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Swap", cb: Callback<Swap>): void;
  once(event: "Swap", options: EventOptions, cb: Callback<Swap>): void;
}
