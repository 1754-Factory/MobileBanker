/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type OperatorTransferred = ContractEventLog<{
  oldOperator: string;
  newOperator: string;
  0: string;
  1: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type PeriodInitialized = ContractEventLog<{
  index: string;
  amount: string;
  0: string;
  1: string;
}>;
export type UpdatePoolWeight = ContractEventLog<{
  stakingToken: string;
  index: string;
  weight: string;
  isNewPool: boolean;
  0: string;
  1: string;
  2: string;
  3: boolean;
}>;

export interface PoolManager extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): PoolManager;
  clone(): PoolManager;
  methods: {
    batchRefreshPools(
      _stakingTokens: string[]
    ): NonPayableTransactionObject<void>;

    batchSetWeight(
      _stakingTokens: string[],
      _weights: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    beginInitializePeriod(): NonPayableTransactionObject<void>;

    commitInitializePeriod(): NonPayableTransactionObject<void>;

    computeAmountForPeriod(
      _period: number | string | BN
    ): NonPayableTransactionObject<string>;

    computeAmountForPool(
      _stakingToken: string,
      _period: number | string | BN
    ): NonPayableTransactionObject<string>;

    computePoolShare(
      _stakingToken: string,
      _amount: number | string | BN
    ): NonPayableTransactionObject<string>;

    currentPeriod(): NonPayableTransactionObject<{
      index: string;
      amount: string;
      isInitializing: boolean;
      totalWeightAllocated: string;
      0: string;
      1: string;
      2: boolean;
      3: string;
    }>;

    initializePeriod(
      _stakingTokens: string[]
    ): NonPayableTransactionObject<void>;

    isOwner(): NonPayableTransactionObject<boolean>;

    miningAllocator(): NonPayableTransactionObject<string>;

    nextPeriod(): NonPayableTransactionObject<string>;

    operator(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    pools(arg0: string): NonPayableTransactionObject<{
      index: string;
      stakingToken: string;
      poolAddress: string;
      weight: string;
      nextPeriod: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
    }>;

    poolsByIndex(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    poolsCount(): NonPayableTransactionObject<string>;

    recoverERC20(
      _pool: string,
      _tokenAddress: string,
      _tokenAmount: number | string | BN
    ): NonPayableTransactionObject<void>;

    refreshPool(_stakingToken: string): NonPayableTransactionObject<void>;

    releaseSchedule(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    rewardsToken(): NonPayableTransactionObject<string>;

    setOperator(_operator: string): NonPayableTransactionObject<void>;

    setPaused(
      _pool: string,
      _paused: boolean
    ): NonPayableTransactionObject<void>;

    setWeight(
      _stakingToken: string,
      _weight: number | string | BN
    ): NonPayableTransactionObject<string>;

    totalWeight(): NonPayableTransactionObject<string>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;
  };
  events: {
    OperatorTransferred(cb?: Callback<OperatorTransferred>): EventEmitter;
    OperatorTransferred(
      options?: EventOptions,
      cb?: Callback<OperatorTransferred>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    PeriodInitialized(cb?: Callback<PeriodInitialized>): EventEmitter;
    PeriodInitialized(
      options?: EventOptions,
      cb?: Callback<PeriodInitialized>
    ): EventEmitter;

    UpdatePoolWeight(cb?: Callback<UpdatePoolWeight>): EventEmitter;
    UpdatePoolWeight(
      options?: EventOptions,
      cb?: Callback<UpdatePoolWeight>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "OperatorTransferred", cb: Callback<OperatorTransferred>): void;
  once(
    event: "OperatorTransferred",
    options: EventOptions,
    cb: Callback<OperatorTransferred>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "PeriodInitialized", cb: Callback<PeriodInitialized>): void;
  once(
    event: "PeriodInitialized",
    options: EventOptions,
    cb: Callback<PeriodInitialized>
  ): void;

  once(event: "UpdatePoolWeight", cb: Callback<UpdatePoolWeight>): void;
  once(
    event: "UpdatePoolWeight",
    options: EventOptions,
    cb: Callback<UpdatePoolWeight>
  ): void;
}
