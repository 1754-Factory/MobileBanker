/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type ChangeRate = ContractEventLog<{
  loan: string;
  newRate: string;
  0: string;
  1: string;
}>;
export type DecreaseDebt = ContractEventLog<{
  loan: string;
  currencyAmount: string;
  0: string;
  1: string;
}>;
export type Deny = ContractEventLog<{
  usr: string;
  0: string;
}>;
export type File = ContractEventLog<{
  what: string;
  rate: string;
  value: string;
  0: string;
  1: string;
  2: string;
}>;
export type IncreaseDebt = ContractEventLog<{
  loan: string;
  currencyAmount: string;
  0: string;
  1: string;
}>;
export type Rely = ContractEventLog<{
  usr: string;
  0: string;
}>;
export type SetRate = ContractEventLog<{
  loan: string;
  rate: string;
  0: string;
  1: string;
}>;

export interface InterestModule extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): InterestModule;
  clone(): InterestModule;
  methods: {
    accrue(loan: number | string | BN): NonPayableTransactionObject<void>;

    changeRate(
      loan: number | string | BN,
      newRate: number | string | BN
    ): NonPayableTransactionObject<void>;

    chargeInterest(
      interestBearingAmount: number | string | BN,
      ratePerSecond: number | string | BN,
      lastUpdated: number | string | BN
    ): NonPayableTransactionObject<string>;

    compounding(
      chi: number | string | BN,
      ratePerSecond: number | string | BN,
      lastUpdated: number | string | BN,
      pie: number | string | BN
    ): NonPayableTransactionObject<{
      0: string;
      1: string;
    }>;

    debt(loan: number | string | BN): NonPayableTransactionObject<string>;

    decDebt(
      loan: number | string | BN,
      currencyAmount: number | string | BN
    ): NonPayableTransactionObject<void>;

    deny(usr: string): NonPayableTransactionObject<void>;

    drip(rate: number | string | BN): NonPayableTransactionObject<void>;

    file(
      what: string | number[],
      rate: number | string | BN,
      value: number | string | BN
    ): NonPayableTransactionObject<void>;

    incDebt(
      loan: number | string | BN,
      currencyAmount: number | string | BN
    ): NonPayableTransactionObject<void>;

    loanRates(arg0: number | string | BN): NonPayableTransactionObject<string>;

    newLoan(
      loan: number | string | BN,
      ratePerSecond: number | string | BN,
      fixedRate: number | string | BN
    ): NonPayableTransactionObject<void>;

    pie(arg0: number | string | BN): NonPayableTransactionObject<string>;

    rateDebt(rate: number | string | BN): NonPayableTransactionObject<string>;

    rates(arg0: number | string | BN): NonPayableTransactionObject<{
      pie: string;
      chi: string;
      ratePerSecond: string;
      lastUpdated: string;
      fixedRate: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
    }>;

    rdiv(
      x: number | string | BN,
      y: number | string | BN
    ): NonPayableTransactionObject<string>;

    rely(usr: string): NonPayableTransactionObject<void>;

    rmul(
      x: number | string | BN,
      y: number | string | BN
    ): NonPayableTransactionObject<string>;

    rpow(
      x: number | string | BN,
      n: number | string | BN,
      base: number | string | BN
    ): NonPayableTransactionObject<string>;

    safeAdd(
      x: number | string | BN,
      y: number | string | BN
    ): NonPayableTransactionObject<string>;

    safeDiv(
      x: number | string | BN,
      y: number | string | BN
    ): NonPayableTransactionObject<string>;

    safeMul(
      x: number | string | BN,
      y: number | string | BN
    ): NonPayableTransactionObject<string>;

    safeSub(
      x: number | string | BN,
      y: number | string | BN
    ): NonPayableTransactionObject<string>;

    setRate(
      loan: number | string | BN,
      rate: number | string | BN
    ): NonPayableTransactionObject<void>;

    toAmount(
      chi: number | string | BN,
      pie: number | string | BN
    ): NonPayableTransactionObject<string>;

    toPie(
      chi: number | string | BN,
      amount: number | string | BN
    ): NonPayableTransactionObject<string>;

    wards(arg0: string): NonPayableTransactionObject<string>;
  };
  events: {
    ChangeRate(cb?: Callback<ChangeRate>): EventEmitter;
    ChangeRate(options?: EventOptions, cb?: Callback<ChangeRate>): EventEmitter;

    DecreaseDebt(cb?: Callback<DecreaseDebt>): EventEmitter;
    DecreaseDebt(
      options?: EventOptions,
      cb?: Callback<DecreaseDebt>
    ): EventEmitter;

    Deny(cb?: Callback<Deny>): EventEmitter;
    Deny(options?: EventOptions, cb?: Callback<Deny>): EventEmitter;

    File(cb?: Callback<File>): EventEmitter;
    File(options?: EventOptions, cb?: Callback<File>): EventEmitter;

    IncreaseDebt(cb?: Callback<IncreaseDebt>): EventEmitter;
    IncreaseDebt(
      options?: EventOptions,
      cb?: Callback<IncreaseDebt>
    ): EventEmitter;

    Rely(cb?: Callback<Rely>): EventEmitter;
    Rely(options?: EventOptions, cb?: Callback<Rely>): EventEmitter;

    SetRate(cb?: Callback<SetRate>): EventEmitter;
    SetRate(options?: EventOptions, cb?: Callback<SetRate>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "ChangeRate", cb: Callback<ChangeRate>): void;
  once(
    event: "ChangeRate",
    options: EventOptions,
    cb: Callback<ChangeRate>
  ): void;

  once(event: "DecreaseDebt", cb: Callback<DecreaseDebt>): void;
  once(
    event: "DecreaseDebt",
    options: EventOptions,
    cb: Callback<DecreaseDebt>
  ): void;

  once(event: "Deny", cb: Callback<Deny>): void;
  once(event: "Deny", options: EventOptions, cb: Callback<Deny>): void;

  once(event: "File", cb: Callback<File>): void;
  once(event: "File", options: EventOptions, cb: Callback<File>): void;

  once(event: "IncreaseDebt", cb: Callback<IncreaseDebt>): void;
  once(
    event: "IncreaseDebt",
    options: EventOptions,
    cb: Callback<IncreaseDebt>
  ): void;

  once(event: "Rely", cb: Callback<Rely>): void;
  once(event: "Rely", options: EventOptions, cb: Callback<Rely>): void;

  once(event: "SetRate", cb: Callback<SetRate>): void;
  once(event: "SetRate", options: EventOptions, cb: Callback<SetRate>): void;
}
