/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Approval = ContractEventLog<{
  owner: string;
  spender: string;
  value: string;
  0: string;
  1: string;
  2: string;
}>;
export type BalanceTransfer = ContractEventLog<{
  from: string;
  to: string;
  value: string;
  index: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type Burn = ContractEventLog<{
  from: string;
  target: string;
  value: string;
  index: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type Initialized = ContractEventLog<{
  underlyingAsset: string;
  pool: string;
  treasury: string;
  incentivesController: string;
  aTokenDecimals: string;
  aTokenName: string;
  aTokenSymbol: string;
  params: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
  6: string;
  7: string;
}>;
export type Mint = ContractEventLog<{
  from: string;
  value: string;
  index: string;
  0: string;
  1: string;
  2: string;
}>;
export type Transfer = ContractEventLog<{
  from: string;
  to: string;
  value: string;
  0: string;
  1: string;
  2: string;
}>;

export interface MToken extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): MToken;
  clone(): MToken;
  methods: {
    ATOKEN_REVISION(): NonPayableTransactionObject<string>;

    DOMAIN_SEPARATOR(): NonPayableTransactionObject<string>;

    EIP712_REVISION(): NonPayableTransactionObject<string>;

    PERMIT_TYPEHASH(): NonPayableTransactionObject<string>;

    POOL(): NonPayableTransactionObject<string>;

    RESERVE_TREASURY_ADDRESS(): NonPayableTransactionObject<string>;

    UNDERLYING_ASSET_ADDRESS(): NonPayableTransactionObject<string>;

    _nonces(arg0: string): NonPayableTransactionObject<string>;

    allowance(
      owner: string,
      spender: string
    ): NonPayableTransactionObject<string>;

    approve(
      spender: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    balanceOf(user: string): NonPayableTransactionObject<string>;

    burn(
      user: string,
      receiverOfUnderlying: string,
      amount: number | string | BN,
      index: number | string | BN
    ): NonPayableTransactionObject<void>;

    decimals(): NonPayableTransactionObject<string>;

    decreaseAllowance(
      spender: string,
      subtractedValue: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    getIncentivesController(): NonPayableTransactionObject<string>;

    getScaledUserBalanceAndSupply(user: string): NonPayableTransactionObject<{
      0: string;
      1: string;
    }>;

    handleRepayment(
      user: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    increaseAllowance(
      spender: string,
      addedValue: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    initialize(
      pool: string,
      treasury: string,
      underlyingAsset: string,
      incentivesController: string,
      aTokenDecimals: number | string | BN,
      aTokenName: string,
      aTokenSymbol: string,
      params: string | number[]
    ): NonPayableTransactionObject<void>;

    mint(
      user: string,
      amount: number | string | BN,
      index: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    mintToTreasury(
      amount: number | string | BN,
      index: number | string | BN
    ): NonPayableTransactionObject<void>;

    name(): NonPayableTransactionObject<string>;

    permit(
      owner: string,
      spender: string,
      value: number | string | BN,
      deadline: number | string | BN,
      v: number | string | BN,
      r: string | number[],
      s: string | number[]
    ): NonPayableTransactionObject<void>;

    scaledBalanceOf(user: string): NonPayableTransactionObject<string>;

    scaledTotalSupply(): NonPayableTransactionObject<string>;

    symbol(): NonPayableTransactionObject<string>;

    totalSupply(): NonPayableTransactionObject<string>;

    transfer(
      recipient: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    transferOnLiquidation(
      from: string,
      to: string,
      value: number | string | BN
    ): NonPayableTransactionObject<void>;

    transferUnderlyingTo(
      target: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<string>;
  };
  events: {
    Approval(cb?: Callback<Approval>): EventEmitter;
    Approval(options?: EventOptions, cb?: Callback<Approval>): EventEmitter;

    BalanceTransfer(cb?: Callback<BalanceTransfer>): EventEmitter;
    BalanceTransfer(
      options?: EventOptions,
      cb?: Callback<BalanceTransfer>
    ): EventEmitter;

    Burn(cb?: Callback<Burn>): EventEmitter;
    Burn(options?: EventOptions, cb?: Callback<Burn>): EventEmitter;

    Initialized(cb?: Callback<Initialized>): EventEmitter;
    Initialized(
      options?: EventOptions,
      cb?: Callback<Initialized>
    ): EventEmitter;

    Mint(cb?: Callback<Mint>): EventEmitter;
    Mint(options?: EventOptions, cb?: Callback<Mint>): EventEmitter;

    Transfer(cb?: Callback<Transfer>): EventEmitter;
    Transfer(options?: EventOptions, cb?: Callback<Transfer>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Approval", cb: Callback<Approval>): void;
  once(event: "Approval", options: EventOptions, cb: Callback<Approval>): void;

  once(event: "BalanceTransfer", cb: Callback<BalanceTransfer>): void;
  once(
    event: "BalanceTransfer",
    options: EventOptions,
    cb: Callback<BalanceTransfer>
  ): void;

  once(event: "Burn", cb: Callback<Burn>): void;
  once(event: "Burn", options: EventOptions, cb: Callback<Burn>): void;

  once(event: "Initialized", cb: Callback<Initialized>): void;
  once(
    event: "Initialized",
    options: EventOptions,
    cb: Callback<Initialized>
  ): void;

  once(event: "Mint", cb: Callback<Mint>): void;
  once(event: "Mint", options: EventOptions, cb: Callback<Mint>): void;

  once(event: "Transfer", cb: Callback<Transfer>): void;
  once(event: "Transfer", options: EventOptions, cb: Callback<Transfer>): void;
}
