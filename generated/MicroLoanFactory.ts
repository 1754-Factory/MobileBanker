/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Attestation = ContractEventLog<{
  loanId: string;
  attestor: string;
  score: string;
  details: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type AttestorAdded = ContractEventLog<{
  attestor: string;
  0: string;
}>;
export type AttestorRemoved = ContractEventLog<{
  attestor: string;
  0: string;
}>;
export type LoanFulfilled = ContractEventLog<{
  id: string;
  time: string;
  borrower: string;
  amount: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type LoanFullyPaid = ContractEventLog<{
  id: string;
  time: string;
  borrower: string;
  amountBorrowed: string;
  elapsedTime: string;
  changeToCredit: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type LoanPaymentMade = ContractEventLog<{
  id: string;
  time: string;
  borrower: string;
  amountPaid: string;
  outstandingLoanAmount: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type LoanRequested = ContractEventLog<{
  id: string;
  requestor: string;
  timestamp: string;
  amount: string;
  rate: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;

export interface MicroLoanFactory extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): MicroLoanFactory;
  clone(): MicroLoanFactory;
  methods: {
    IDs(): NonPayableTransactionObject<string>;

    PERCENT_DENOMINATOR(): NonPayableTransactionObject<string>;

    addAttestor(newAttestor: string): NonPayableTransactionObject<void>;

    attest(
      loanId: number | string | BN,
      score: number | string | BN,
      details: string | number[]
    ): NonPayableTransactionObject<void>;

    attestors(arg0: string): NonPayableTransactionObject<boolean>;

    claimCredit(
      creditId: number | string | BN
    ): NonPayableTransactionObject<string>;

    contribute(
      id: number | string | BN,
      amount: number | string | BN
    ): NonPayableTransactionObject<string>;

    creditScores(arg0: string): NonPayableTransactionObject<string>;

    creditToken(): NonPayableTransactionObject<string>;

    getAmountOwed(
      id: number | string | BN
    ): NonPayableTransactionObject<string>;

    interestModule(): NonPayableTransactionObject<string>;

    interestRate(): NonPayableTransactionObject<string>;

    loans(arg0: number | string | BN): NonPayableTransactionObject<{
      start: string;
      deadline: string;
      id: string;
      borrower: string;
      totalPaid: string;
      purpose: string;
      closed: boolean;
      amount: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: boolean;
      7: string;
    }>;

    owner(): NonPayableTransactionObject<string>;

    removeAttestor(toRemove: string): NonPayableTransactionObject<void>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    repayLoan(
      id: number | string | BN,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    requestLoan(
      purpose: number | string | BN,
      amount: number | string | BN,
      duration: number | string | BN
    ): NonPayableTransactionObject<string>;

    requestsByAddress(arg0: string): NonPayableTransactionObject<string>;

    requestsById(arg0: number | string | BN): NonPayableTransactionObject<{
      amount: string;
      amountFilled: string;
      borrower: string;
      duration: string;
      purpose: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
    }>;

    setCreditToken(token: string): NonPayableTransactionObject<void>;

    settlementToken(): NonPayableTransactionObject<string>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;
  };
  events: {
    Attestation(cb?: Callback<Attestation>): EventEmitter;
    Attestation(
      options?: EventOptions,
      cb?: Callback<Attestation>
    ): EventEmitter;

    AttestorAdded(cb?: Callback<AttestorAdded>): EventEmitter;
    AttestorAdded(
      options?: EventOptions,
      cb?: Callback<AttestorAdded>
    ): EventEmitter;

    AttestorRemoved(cb?: Callback<AttestorRemoved>): EventEmitter;
    AttestorRemoved(
      options?: EventOptions,
      cb?: Callback<AttestorRemoved>
    ): EventEmitter;

    LoanFulfilled(cb?: Callback<LoanFulfilled>): EventEmitter;
    LoanFulfilled(
      options?: EventOptions,
      cb?: Callback<LoanFulfilled>
    ): EventEmitter;

    LoanFullyPaid(cb?: Callback<LoanFullyPaid>): EventEmitter;
    LoanFullyPaid(
      options?: EventOptions,
      cb?: Callback<LoanFullyPaid>
    ): EventEmitter;

    LoanPaymentMade(cb?: Callback<LoanPaymentMade>): EventEmitter;
    LoanPaymentMade(
      options?: EventOptions,
      cb?: Callback<LoanPaymentMade>
    ): EventEmitter;

    LoanRequested(cb?: Callback<LoanRequested>): EventEmitter;
    LoanRequested(
      options?: EventOptions,
      cb?: Callback<LoanRequested>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Attestation", cb: Callback<Attestation>): void;
  once(
    event: "Attestation",
    options: EventOptions,
    cb: Callback<Attestation>
  ): void;

  once(event: "AttestorAdded", cb: Callback<AttestorAdded>): void;
  once(
    event: "AttestorAdded",
    options: EventOptions,
    cb: Callback<AttestorAdded>
  ): void;

  once(event: "AttestorRemoved", cb: Callback<AttestorRemoved>): void;
  once(
    event: "AttestorRemoved",
    options: EventOptions,
    cb: Callback<AttestorRemoved>
  ): void;

  once(event: "LoanFulfilled", cb: Callback<LoanFulfilled>): void;
  once(
    event: "LoanFulfilled",
    options: EventOptions,
    cb: Callback<LoanFulfilled>
  ): void;

  once(event: "LoanFullyPaid", cb: Callback<LoanFullyPaid>): void;
  once(
    event: "LoanFullyPaid",
    options: EventOptions,
    cb: Callback<LoanFullyPaid>
  ): void;

  once(event: "LoanPaymentMade", cb: Callback<LoanPaymentMade>): void;
  once(
    event: "LoanPaymentMade",
    options: EventOptions,
    cb: Callback<LoanPaymentMade>
  ): void;

  once(event: "LoanRequested", cb: Callback<LoanRequested>): void;
  once(
    event: "LoanRequested",
    options: EventOptions,
    cb: Callback<LoanRequested>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;
}
